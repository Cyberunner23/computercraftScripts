
-----------------------------------------------------------
----------------------- Global Vars -----------------------
-----------------------------------------------------------

local remoteScriptListLink   = "https://raw.githubusercontent.com/Cyberunner23/computercraftScripts/master/scriptList"
local remoteScriptListParsed = {}
local localScriptListParsed  = {}

-----------------------------------------------------------
--------------------- Util Functions ----------------------
-----------------------------------------------------------
function parseScriptList(scriptList)
  scriptListParsed = {}
  while true do
    local scriptName = scriptList.readLine()
    --if scripName not empty then read next line and set it as version
    if scriptName == "" or scriptName == nil then
      break
    else
      scriptListParsed[scriptName] = {}
      scriptListParsed[scriptName]["scriptVersion"] = scriptList.readLine()
    end
  end
  return scriptListParsed
end

function writeScriptList(parsedScriptList)

  local fileHandle = fs.open("ScriptList/ScriptList.txt", "w")
  if fileHandle == nil then
    error("Could not open the local script list for writing. Something went very bad. Exiting...")
  end

  for k,v in pairs(parsedScriptList) do
    fileHandle.write(parsedScriptList[k])
    fileHandle.write(parsedScriptList[k].version)
  end

end

function addScriptToLocalScriptList(scriptName, scriptVersion)
  localScriptListParsed[scriptName] = {}
  localScriptListParsed[scriptName].scriptVersion = scriptVersion
  writeScriptList(localScriptListParsed)
end

function removeScriptFromLocalScriptList(scriptName)
  localScriptListParsed[scriptName] = nil
  writeScriptList(localScriptListParsed)
end

function downloadScriptRaw(scriptName)

  print("Downloading script...")

  local scriptLink   = "https://raw.githubusercontent.com/Cyberunner23/computercraftScripts/master/" .. scriptName
  local scriptHandle = http.get(scriptLink)
  local scriptData   = scriptHandle.readAll()
  local fileHandle   = nil

  if not scriptData then
    error("Could not download the script from the repo. Exiting...")
  end

  print("Done.")
  print("Writing script...")

  fileHandle = fs.open(scriptName, "w")
  fileHandle.write(scriptData)
  fileHandle.close()

  print("Done")

end

function downloadScript(scriptName)
  downloadScriptRaw(scriptName)
  addScriptToLocalScriptList(scriptName, remoteScriptListParsed[scriptName].scriptVersion)
end

function deleteScript(scriptName)
  removeScriptFromLocalScriptList(scriptName)
  fs.delete(scriptName)
end

function updateScript(scriptName)
  print("Deleting old version of " ..scriptName)
  deleteScript(scriptName)
  print("Downloading new version of " ..scriptName)
  downloadScript(scriptName)
  print("Done.")
end


-----------------------------------------------------------
----------- Get And Parse Script List From Repo -----------
-----------------------------------------------------------

print("Getting remote script list...")

--Get script list from repo
local remoteScriptList = http.get(remoteScriptListLink)

if not remoteScriptList then
  error("Could not download the script list from the repo. Exiting...")
end

--Parse remote script list
remoteScriptListParsed = parseScriptList(remoteScriptList)

print("Done.")


-----------------------------------------------------------
--- Check If The Local Script List Exists And Parse It ---
-----------------------------------------------------------

print("Reading local script list...")

--Check if the dir exists, if not make one
if not fs.isDir("ScriptList") then
  fs.makeDir("ScriptList")
end

--Check if the local script list exists, if not make a blank one for now.
if not fs.exists("ScriptList/ScriptList.txt") then
  print("Local script list not found... Making one.")
  local tmpFileHandle = fs.open("ScriptList/ScriptList.txt", "w")
  tmpFileHandle.close()
end

--Open and read local script list
local fileHandle = fs.open("ScriptList/ScriptList.txt", "r")
if fileHandle == nil then
  error("Could not open the local script list. Something went horribly wrong. Exiting...")
end

--Parse local script list
localScriptListParsed = parseScriptList(fileHandle)


---------------------------------------------------
-- Check If Local Script List And Files Match Up --
---------------------------------------------------

local missingScripts = {}

function askYesNoQuestion(msg, yesAction, noAction)

  print(msg)

  while true do

    local input = read()

    if string.lower(input) == "yes" or string.lower(input) == "y" then
      yesAction()
      break
    elseif string.lower(input) == "no" or string.lower(input) == "n" then
      noAction()
      break
    else
      print("Please enter a valid option.")
    end

  end

end

function onDownloadMissingScriptsAccept()
  local question = "Download all scripts? (yes(y) / no(n))"
  askYesNoQuestion(question, onDownloadAllMissingScriptsAccepted, onDownloadAllMissingScriptsRefused)
end

function onDownloadAllMissingScriptsAccepted()
  for i = 1, #missingScripts do
    removeScriptFromLocalScriptList(missingScripts[i]) -- dat typo doe
    downloadScript(missingScripts[i])
  end
end

function onDownloadAllMissingScriptsRefused()

  for i = 1, #missingScripts do

    question = "Would you like to download: " + missingScript[i] + " ? (yes(y) / no(n)"
    askYesNoQuestion(question, function()
                                 removeScriptFromLocalScriptList(missingScript[i])
                                 downloadScript(missingScripts[i])
                               end,
                               function()
                                 local question = "Remove it from the local script list? (yes(y) / no(n)"
                                 askYesNoQuestion(question, function() removeScriptFromLocalScriptList(missingScript[i]) end, function() end)
                               end)

  end

end


function onDownloadMissingScriptsRefuse()
  local question = "Do you want to remove all the scripts from the local script list?"
  askYesNoQuestion(question, onRemoveAllScriptsFromLocalListAccept, onRemoveAllScriptsFromLocalListRefused)
end

function onRemoveAllScriptsFromLocalListAccept()
  for i = 1, #missingScripts do
    removeScriptFromLocalScriptList(missingScripts[i])
  end
end

function onRemoveAllScriptsFromLocalListRefused()

  for i = 1, #missingScripts do

    question = "Would you like to remove: " + missingScript[i] + " from the local script list? (yes(y) / no(n)"
    askYesNoQuestion(question, function() removeScriptFromLocalScriptList(missingScripts[i]) end,
                               function() end)

  end

end



--check if some scripts are missing compared to the local file
for k,v in pairs(localScriptListParsed) do
  if not fs.exists(k) then
    table.insert(missingScripts, k)
  end
end
--thi is redundant, the check I jsut wrote takes care of this what check?
if #missingScripts ~= 0 then

  print("Some scripts that the local script list indicate as being installed are missing.")
  print("Here is the list of missing scripts:")

  for i = 1, #missingScripts do
    print(missingScripts[i])
  end


  local question = "Do you want to download the missing scripts? (This may result in the scripts being also updated.) (yes(y) / no(n))"
  askYesNoQuestion(question, onDownloadMissingScriptsAccept, onDownloadMissingScriptsRefuse)
end


-------------------------------------------------------------
-- Check If There Is A Difference Between Local And Remote --
-------------------------------------------------------------

local outdatedScripts = {}


function onUpdateAccept()

  local question = "Do you want to update all scripts? (yes(y) / no(n))"
  askYesNoQuestion(question, onUpdateAllAccept, onUpdateAllRefuse)

  print("Done updating!")

end

function onUpdateAllAccept()

  print("Updating all scripts...")

  for i = 1, #outdatedScripts do
    updateScript(outdatedScripts[i])
  end

end

function onUpdateAllRefuse()

  for i = 1, #outdatedScripts do

    local question = "Do you want to update: " ..outdatedScripts[i].. " (" ..localScriptListParsed[outdatedScripts[i]].scriptVersion.. " -> " ..remoteScriptListParsed[outdatedScripts[i]].scriptVersion.. ")"
    askYesNoQuestion(question, function() updateScript(outdatedScripts[i]) end, function() print("Update for " ..outdatedScripts[i].. " has been skipped.") end)
  end

end


function onUpdateRefused()
  print("Skipping updates.")
end


print("Checking for updates...")

for k, v in pairs(remoteScriptListParsed) do
  if localScriptListParsed[k] == nil or localScriptListParsed[k].scriptVersion < remoteScriptListParsed[k].scriptVersion then
    table.insert(outdatedScripts, k)
  end
end

if #outdatedScripts ~= 0 then

  print("Updates are available. Here is the list of updates: ")
  for i = 1, #outdatedScripts do
    print(outdatedScripts[i].. " (" ..localScriptListParsed[outdatedScripts[i]].scriptVersion.. " -> " ..remoteScriptListParsed[outdatedScripts[i]].scriptVersion.. ")")
  end

  local question = "Do you wan to update the scripts?"
  askYesNoQuestion(question, onUpdateAccept, onUpdateRefused)

else
  print("All installed scripts are up to date!")
end
 
--TODO: Show list of available scripts ans prompt user for which one is wanted.















